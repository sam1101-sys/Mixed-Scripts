import argparse
import telnetlib
import socket

def check_service(host, port, username, password, blank_password):
    try:
        # Resolve the hostname to an IP address
        ip_address = socket.gethostbyname(host)
        print(f"Checking service on {ip_address} ({host}) using port {port}")

        # Connect to the specified service
        with telnetlib.Telnet(host, port) as tn:
            # Receive the server's banner message
            banner = tn.read_until(b"\r\n", timeout=5).decode("utf-8")
            print(f"Received banner for {ip_address} ({host}): {banner.strip()}")

            # Check if authentication details are provided
            if username:
                tn.read_until(b"login: ", timeout=5)
                tn.write(username.encode("utf-8") + b"\r\n")

                # Check for password prompt
                response = tn.read_until(b"Password: ", timeout=5).decode("utf-8")

                # Check if a blank password is indicated
                if blank_password:
                    tn.write(b"\r\n")
                    response += tn.read_until(b"\r\n", timeout=5).decode("utf-8")

                # Check if a password is provided
                elif password:
                    tn.write(password.encode("utf-8") + b"\r\n")
                    response += tn.read_until(b"\r\n", timeout=5).decode("utf-8")

                # Check for a successful login message
                if "Last login:" in response:
                    print(f"Login successful for {ip_address} ({host}) as {username}")
                else:
                    print(f"Login failed for {ip_address} ({host}) as {username}")
            else:
                print("Username not provided. Skipping login check.")

    except Exception as e:
        print(f"Failed to connect to {ip_address} ({host}) on port {port}: {str(e)}")

def main():
    # Create a command-line argument parser with improved help message
    parser = argparse.ArgumentParser(description="Service Checker", formatter_class=argparse.RawTextHelpFormatter)

    # Add optional arguments for username and password
    parser.add_argument("-u", "--username", help="Username for authentication")
    parser.add_argument("-P", "--password", help="Password for authentication")

    # Add an optional switch for blank password
    parser.add_argument("-b", "--blank-password", action="store_true", help="Indicate a blank password")

    # Add an optional argument for specifying the hosts file
    parser.add_argument("--host", help="Path to the hosts file")

    # Add an optional argument for specifying the port
    parser.add_argument("-p", "--port", type=int, default=23, help="Port to use for Telnet (default: 23)")

    # Update the script's description
    description = """
    This script checks the availability of a service on one or more hosts using Telnet.
    You can specify multiple hosts and optional authentication details.
    If no port is provided, the script uses port 23 as the default.
    If the --host option is used, hostnames will be read from the specified file.
    """
    parser.description = description

    # Parse the command-line arguments
    args = parser.parse_args()

    # List to store the IP addresses of working hosts
    working_ips = []

    # If a hosts file is provided, read the hosts from the file
    if args.host:
        with open(args.host, "r") as host_file:
            host_lines = host_file.readlines()
            # Loop through each host and check the specified service
            for host in [line.strip() for line in host_lines]:
                check_service(host, args.port, args.username, args.password, args.blank_password)
                print("----------------------------------------------")

if __name__ == "__main__":
    main()
